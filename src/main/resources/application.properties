# Actuator / Management
management.endpoints.web.base-path=/manage
management.endpoints.web.exposure.include=*
management.endpoints.health.show-details=always

#log data
logging.file=./logs/school_class.log
logging.pattern.file=%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID}){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx 

spring.profiles.active=production
spring.boot.admin.client.url=http://localhost:8080
spring.application.name=ssm-school-class

#Server
server.contextPath=/school_class
server.port = 8100

# Database
spring.datasource.url = jdbc:postgresql://localhost:5432/SchoolMgmt
spring.datasource.username = school
spring.datasource.password = school


# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQL9Dialect
#Eureka client configurations.
eureka.instance.leaseRenewalIntervalInSeconds= 1
eureka.instance.leaseExpirationDurationInSeconds= 2
eureka.instance.client.serviceUrl.defaultZone = http://127.0.0.1:8761/eureka/
eureka.instance.client.healthcheck.enabled = true
eureka.instance.client.lease.duration = 5